Recorded classes: 2,3,5,6,7,8,9,10,11,12
Rule: The code should either be added or deleted but never edited
Rules while writing a program:
    1. Never write the code hard coded
    2. Checks -> null checks
        if input is string: is it a number or alpha-numeric
                            make the string into a upper/lower case
        if input is number: is it a alpha-numeric (int(input))

What is Python?
	Programming Language
		1. POP - procedure  - C, HTML,CSS
		2. OOP - Object - C++, Java, Dotnet
What do you do with python?
	Programming
	Web application
	Games
	AI & Machine learning
	Visualization - graphs
	Scripting - Hacking
	Animation
	API development - Communication
Why Python?
	Usage is more
	easy readable/understandable
	More library
	Hybrid model( POP + OOP)
	Fast

IDE -> interactive development env -> IDLE

Variables:
    Value can be defined , read with the help of a variable

Extension for Python -> .py
.doc/.docx
.txt
.ppt
.pdf

Python is a dynamically typed language.

String -> Anything which is in double quotes [" "] is string.
"" -> it takes multiple values in a single line
'' -> it for characters
""" """ -> multi line comment / multiline string

Data Types:
Data -> some information which is saved in a variable
Its Types:
1. Numeric -> Integer, Float
2. Dictionary
3. Boolean -> True, False
4. Set
5. Sequence -> List, Tuple, Strings


Operators:

Arithmetic Operators:
    Add
    Sub
    Mul
    Division - float/ floor
    Mod
    power
	
	
				7)50(0.9999   -> 0 -> // - floor divison
				  49
				------
				   1   -> % mod

Comparison Operator:
The output of a comparison operator is always boolean.

    Greater than -> >
    lesser than -> <
    double equals -> ==
    not equals -> !=
    greater than or equal -> >=
    lesser than or equal -> <=

Logical Operators:
    and   -> if both are true then O/P is true
    or    -> if anyone is true then O/P is true
    not   -> Opposite of the value

Assignment Operators:
    =
    +=  -> x += y -> x = x + y
    -=  -> y-=x   -> y = y - x
    *=
    /=
------------------------------------------------------------------------------------------------------
Day-2

Math module
------------
Used for all the mathematical functions and calculations.

Strings:
--------
Set of characters which are written inside the double quotes[" "]

Initialization
Accessing the string

String Slicing:
    str[start:end-1]
    reverse -> str[::-1]

String Operators:
-----------------------------------------------------------------------------------

Conditional Statements:
-----------------------

if I want to work then I'll work else I'll not work.

1. If condition
Syntax:
    if(condition):
        -----------

Rules:
    1. Always have ':' after the condition
    2. Intend your block of code

2. If....else conditional

Syntax:
    if condition:            #True
        ------------
    else:                    # False cases
        ------------

    Rules:
        1. For one if there can only one else
        2. else will never have a condition? Y? -> Condition is already given in the if block

3. Nested if
    If within another if
4. elif
    If there are multiple conditions to be executed then we can use elif
-------------------------------------------------------------------------------------------------------
Day 4
-----

range(start,end-1) :: range(0,5) -> 0,1,2,3,4

Loops in python:

Initialization     -> start point
incrementation     -> how to continue
Condition          -> end point

1. For
2. While
    while a condition is True execute the block

Difference b/w 'for' loop and a 'while' loop:
    1. for when you know the fix value but when you the condition
    2. for cannot override the incrementation but while can override the incrementation

List:
    List is a combination of heterogeneous items which are enclosed in a '[]'


Nested loops: -> need to explain


String join -> 'm'.join('h') -> 'mh'
-------------------------------------------------------------------------------------------------------
Day 5:

Continue & Break:

Continue -> skip
    if a certain condition is met then we use continue to skip the current iteration.
Break    -> stop
    if a certain condition is met then we use break to stop the iteration or loop.

---------------------------------------------------------------------------------------------------------
Day 7:

Sequence data types: List, Tuple, String

List:
1. List is a heterogeneous collection of objects
2. Lists are dynamically sized arrays
3. List -> [] 'separated by ,'

-----------------------------------------------------------------------------------------------------------
Day 8:

Tuple:

1. Tuple is a collection of python objects most likely a list.[sequence]
2. Tuple -> ()
3. append(),insert(),remove() -> doesn't exist in tuple
4. Tuples are basically immutable

Dictionary:
Dictionary is a combination of keys and values.
Dictionary -> {}
Dictionary is not a part of sequence datatypes. so indexing is not available.
-----------------------------------------------------------------------------------------------------------
Day 9:
Analog clock with python animation
------------------------------------------------------------------------------------------------------------
Day 10:
Python date and time:

Functions:
When a function is present inside a class then it is called as a method.

Why functions:
1. Re-usability
2. Readability

#Creating a function
def ...name...():
    ...
    ...
    ..
    ..

#calling the function
...name....()

Functions with arguments
pass by value -> passing the value in the function call
pass by reference -> passing the variable in the function call

OOPS - day 11
-------------------
Class - Class is a blueprint or a template for creating objects. It defines a set of attributes and methods that
will be common to all objects created from it.
Object - Representation of the class or instance of the class. It is a concrete realization of the attributes and
methods defined in a class

__init__() method -> Constructor -> Constructor is called automatically when ever the object is created.

Inheritance:
-------------------------------
Concept that allows a class to inherit attributes(variables) and methods from another class.
Why? Reusability & modularity
